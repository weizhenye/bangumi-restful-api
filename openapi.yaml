openapi: 3.0.0
info:
  title: Bangumi RESTful API
  version: 1.0.0
  description: |-
    __本文档仅为 RESTful API 设计练习，而非实际存在的 API。__

    实际 API 请查看 [https://bangumi.github.io/api/](https://bangumi.github.io/api/)

    一些约定、说明：
    * 请求资源列表时，模型的 optional 字段可以不返回；请求资源详情时，整个模型完整返回
    * query 的类型为 array 时，多个值使用逗号分隔
    * 涉及图片 url 的字段，如头像、封面，都为 string 类型。获取不同质量、尺寸的图片通过在图片 url 后加 query 实现。

    TODO:
    * 杂项
      * 最后评论时间
    * 条目
      * 漫画系列、小说系列是否应该作为子类型
      * 关联条目
      * 收藏只看朋友、好友评价
    * Wiki
      * 编辑记录
      * 关联记录
    * 日志
      * Blog 在 request body 里需要有 subjects[].id
    * 目录
      * 当前用户已完成条目数
    * 章节
    * 人物
    * 角色
    * 标签
      * 你再想想
  contact:
    name: Zhenye Wei
    url: 'https://github.com/weizhenye/bangumi-restful-api/issues'
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
servers:
  - url: 'https://api.bgm.tv'
paths:
  /blogs:
    get:
      summary: 日志列表
      tags:
        - 日志
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                  blogs:
                    type: array
                    items:
                      $ref: '#/components/schemas/Blog'
      operationId: get-blogs
      description: 获取日志列表
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - schema:
            type: array
            items:
              type: string
              example: 动画
          in: query
          explode: false
          name: tags
          description: 根据标签过滤
        - schema:
            type: string
          in: query
          name: creator.id
          description: 根据创建者用户 ID 或用户名过滤
        - schema:
            type: string
          in: query
          name: subject.id
          description: 根据条目 ID 过滤
        - schema:
            type: string
          in: query
          name: subject.type
          description: 根据条目类型过滤
    post:
      summary: 新建日志
      operationId: post-blogs
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blog'
      description: 新建日志
      tags:
        - 日志
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Blog'
                - type: object
                  properties:
                    subjects:
                      type: array
                      items:
                        type: object
                        properties:
                          id:
                            type: integer
                            readOnly: true
                        required:
                          - id
                  required:
                    - subjects
  '/blogs/{blogId}':
    parameters:
      - schema:
          type: string
        name: blogId
        in: path
        required: true
    get:
      summary: 日志详情
      tags:
        - 日志
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blog'
      operationId: get-blogs-blogId
      description: 获取日志详情
    patch:
      summary: 修改日志
      operationId: patch-blogs-blogId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blog'
      description: 修改日志
      tags:
        - 日志
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Blog'
    delete:
      summary: 删除日志
      operationId: delete-blogs-blogId
      responses:
        '204':
          description: No Content
      description: 删除日志
      tags:
        - 日志
  '/blogs/{blogId}/comments':
    parameters:
      - schema:
          type: string
        name: blogId
        in: path
        required: true
    get:
      summary: 日志评论列表
      tags:
        - 日志
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  comments:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'
      operationId: get-blogs-blogId-comments
      description: 获取日志评论列表
    post:
      summary: 新建日志评论
      operationId: post-blogs-blogId-comments
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
      description: 新建日志评论
      tags:
        - 日志
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
  '/blogs/{blogId}/comments/{commentId}':
    parameters:
      - schema:
          type: string
        name: blogId
        in: path
        required: true
      - schema:
          type: string
        name: commentId
        in: path
        required: true
    patch:
      summary: 修改日志评论
      tags:
        - 日志
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
      operationId: patch-blogs-blogId-comments-commentId
      description: 修改日志评论
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
    delete:
      summary: 删除日志评论
      operationId: delete-blogs-blogId-comments-commentId
      responses:
        '204':
          description: No Content
      description: 删除日志评论
      tags:
        - 日志
  /characters:
    get:
      summary: 角色列表
      tags:
        - 角色
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                  characters:
                    type: array
                    items:
                      $ref: '#/components/schemas/Character'
      operationId: get-characters
      description: 获取角色列表
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - schema:
            type: string
            enum:
              - character
              - robot
              - fleet
              - organization
          in: query
          name: type
          description: 根据类型过滤
        - schema:
            type: string
            enum:
              - A
              - B
              - O
              - AB
          in: query
          name: bloodType
          description: 根据血型过滤
        - schema:
            type: string
            enum:
              - male
              - female
          in: query
          name: gender
          description: 根据性别过滤
        - schema:
            type: string
            enum: []
            example: '--01'
          in: query
          name: birthday
          description: 根据生日过滤
        - schema:
            type: string
            enum:
              - '-stat.users'
              - '-stat.comments'
              - '-createdAt'
              - +name
          in: query
          name: sortBy
          description: 排序
    post:
      summary: 新建角色
      operationId: post-characters
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Character'
      description: 新建角色
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Character'
      tags:
        - 角色
  '/characters/{characterId}':
    parameters:
      - schema:
          type: string
        name: characterId
        in: path
        required: true
    get:
      summary: 角色详情
      tags:
        - 角色
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Character'
      operationId: get-characters-characterId
      description: 获取角色详情
    patch:
      summary: 修改角色
      operationId: patch-characters-characterId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Character'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Character'
      description: 修改角色
      tags:
        - 角色
  '/characters/{characterId}/comments':
    parameters:
      - schema:
          type: string
        name: characterId
        in: path
        required: true
    get:
      summary: 角色评论列表
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  comments:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'
      operationId: get-characters-characterId-comments
      description: 获取角色评论列表
      tags:
        - 角色
    post:
      summary: 创建角色评论
      operationId: post-characters-characterId-comments
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
      description: 创建角色评论
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      tags:
        - 角色
  '/characters/{characterId}/comments/{commentId}':
    parameters:
      - schema:
          type: string
        name: characterId
        in: path
        required: true
      - schema:
          type: string
        name: commentId
        in: path
        required: true
    patch:
      summary: 修改角色评论
      operationId: patch-characters-characterId-comments-commentId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
      description: 修改角色评论
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      tags:
        - 角色
    delete:
      summary: 删除角色评论
      operationId: delete-characters-characterId-comments-commentId
      responses:
        '204':
          description: No Content
      description: 删除角色评论
      tags:
        - 角色
  /characters/-/collections:
    get:
      summary: 所有角色收藏列表
      tags:
        - 角色
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                  collections:
                    type: array
                    items:
                      $ref: '#/components/schemas/CharacterCollection'
      operationId: get-characters---collections
      description: 获取所有角色收藏列表，不返回 creator 字段，要返回 character 字段
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - schema:
            type: string
          in: query
          name: creator.id
          description: 根据创建者用户 ID 或用户名过滤
          required: true
  '/characters/{characterId}/collections':
    parameters:
      - schema:
          type: string
        name: characterId
        in: path
        required: true
    get:
      summary: 角色收藏列表
      tags:
        - 角色
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                  collections:
                    type: array
                    items:
                      $ref: '#/components/schemas/CharacterCollection'
      operationId: get-characters-characterId-collections
      description: 获取角色收藏列表，要返回 creator 字段，不返回 character 字段
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
  '/characters/{characterId}/collections/{userId}':
    parameters:
      - schema:
          type: string
        name: characterId
        in: path
        required: true
      - $ref: '#/components/parameters/userId'
    get:
      summary: 确认收藏角色
      operationId: get-characters-characterId-collections-userId
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      description: 用于判断是否已收藏该角色，未收藏返回 404
      tags:
        - 角色
    put:
      summary: 收藏角色
      operationId: put-characters-characterId-collections-userId
      responses:
        '201':
          description: Created
      description: 收藏角色
      tags:
        - 角色
    delete:
      summary: 取消收藏角色
      operationId: delete-characters-characterId-collections-userId
      responses:
        '204':
          description: No Content
      description: 取消收藏角色
      tags:
        - 角色
  /episodes:
    get:
      summary: 章节列表
      tags:
        - 章节
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                  episodes:
                    $ref: '#/components/schemas/Episode'
      operationId: get-episodes
      description: 获取章节列表
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - schema:
            type: string
            enum:
              - '-comment.updatedAt'
          in: query
          name: sortBy
          description: 排序
  '/episodes/{episodeId}':
    parameters:
      - schema:
          type: string
        name: episodeId
        in: path
        required: true
    get:
      summary: 章节详情
      tags:
        - 章节
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Episode'
      operationId: get-episodes-episodeId
      description: 获取章节详情
    patch:
      summary: 修改章节
      operationId: patch-episodes-episodeId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Episode'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      description: 修改章节
      tags:
        - 章节
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Episode'
    delete:
      summary: 删除章节
      operationId: delete-episodes-episodeId
      responses:
        '204':
          description: No Content
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      description: 删除章节
      tags:
        - 章节
  '/episodes/{episodeId}/collections/{userId}':
    parameters:
      - schema:
          type: string
        name: episodeId
        in: path
        required: true
      - $ref: '#/components/parameters/userId'
    patch:
      summary: 修改章节收藏
      tags:
        - 章节
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EpisodeCollection'
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EpisodeCollection'
      operationId: patch-episodes-episodeId-collections-userId
      description: 修改章节收藏
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EpisodeCollection'
        description: ''
    delete:
      summary: 删除章节收藏
      operationId: delete-episodes-episodeId-collections-userId
      responses:
        '204':
          description: No Content
      description: 删除章节收藏
      tags:
        - 章节
  '/episodes/{episodeId}/comments':
    parameters:
      - schema:
          type: string
        name: episodeId
        in: path
        required: true
    get:
      summary: 章节评论列表
      tags:
        - 章节
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  comments:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'
      operationId: get-episodes-episodeId-comments
      description: 获取章节评论列表
    post:
      summary: 新建章节评论
      operationId: post-episodes-episodeId-comments
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
      description: 新建章节评论
      tags:
        - 章节
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
  '/episodes/{episodeId}/comments/{commentId}':
    parameters:
      - schema:
          type: string
        name: episodeId
        in: path
        required: true
      - schema:
          type: string
        name: commentId
        in: path
        required: true
    patch:
      summary: 修改章节评论
      operationId: patch-episodes-episodeId-comments-commentId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
      description: 修改章节评论
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      tags:
        - 章节
    delete:
      summary: 删除章节评论
      operationId: delete-episodes-episodeId-comments-commentId
      responses:
        '204':
          description: No Content
      description: 删除章节评论
      tags:
        - 章节
  '/episodes/{episodeId}/revisions':
    parameters:
      - schema:
          type: string
        name: episodeId
        in: path
        required: true
    get:
      summary: 章节修订列表
      tags:
        - 章节
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  revisions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Revision'
      operationId: get-episodes-episodeId-revisions
      description: 获取章节修订列表
  /groups:
    get:
      summary: 小组列表
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                  groups:
                    type: array
                    items:
                      $ref: '#/components/schemas/Group'
      operationId: get-groups
      description: 获取小组列表
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - schema:
            type: string
          in: query
          name: category.id
          description: 根据分类 ID 过滤
        - schema:
            type: string
          in: query
          name: creator.id
          description: 根据创建者用户 ID 或用户名过滤
        - schema:
            type: string
          in: query
          name: user.id
          description: 根据成员用户 ID 或用户名过滤
      tags:
        - 小组
    post:
      summary: 创建小组
      operationId: post-groups
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
      description: 创建小组
      tags:
        - 小组
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
  '/groups/{groupId}':
    parameters:
      - schema:
          type: string
        name: groupId
        in: path
        required: true
    get:
      summary: 小组详情
      tags:
        - 小组
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
      operationId: get-groups-groupId
      description: 获取小组详情
    patch:
      summary: 修改小组
      operationId: patch-groups-groupId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
        description: ''
      description: 修改小组
      tags:
        - 小组
  /groups/-/topics:
    get:
      summary: 所有小组话题列表
      tags:
        - 小组
        - 话题
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                  topics:
                    type: array
                    items:
                      $ref: '#/components/schemas/Topic'
      operationId: get-groups---topics
      description: 获取所有小组话题列表
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - schema:
            type: string
          in: query
          name: creator.id
          description: 根据创建者用户 ID 或用户名过滤
        - schema:
            type: string
          in: query
          name: comment.creator.id
          description: 根据回复者用户 ID 或用户名过滤
  '/groups/{groupId}/topics':
    parameters:
      - schema:
          type: string
        name: groupId
        in: path
        required: true
    get:
      summary: 小组话题列表
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                  topics:
                    type: array
                    items:
                      $ref: '#/components/schemas/Topic'
      operationId: get-groups-groupId-topics
      description: 获取小组话题列表
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - schema:
            type: string
          in: query
          name: creator.id
          description: 根据创建者用户 ID 或用户名过滤
        - schema:
            type: string
          in: query
          name: comment.creator.id
          description: 根据回复者用户 ID 或用户名过滤
      tags:
        - 小组
        - 话题
    post:
      summary: 新建小组话题
      operationId: post-groups-groupId-topics
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'
      description: 新建小组话题
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Topic'
      tags:
        - 小组
        - 话题
  '/groups/{groupId}/users':
    parameters:
      - schema:
          type: string
        name: groupId
        in: path
        required: true
    get:
      summary: 成员列表
      tags:
        - 小组
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
      operationId: get-groups-groupId-users
      description: 获取成员列表
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
  '/groups/{groupId}/users/{userId}':
    parameters:
      - schema:
          type: string
        name: groupId
        in: path
        required: true
      - $ref: '#/components/parameters/userId'
    get:
      summary: 确认成员
      operationId: get-groups-groupId-users-userId
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      description: 用于判断是否已加入小组，未加入返回 404
      tags:
        - 小组
    put:
      summary: 加入小组
      operationId: put-groups-groupId-users-userId
      responses:
        '201':
          description: Created
      description: 加入小组
      tags:
        - 小组
    delete:
      summary: 退出小组
      operationId: delete-groups-groupId-users-userId
      responses:
        '204':
          description: No Content
      description: 退出小组
      tags:
        - 小组
  /images:
    post:
      summary: 上传图片
      tags:
        - 杂项
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: ID
                  url:
                    type: string
                    description: URL
                    format: uri
                required:
                  - id
                  - url
      operationId: post-images
      description: '上传图片，拿返回的 url 进行后续流程。如修改用户头像，则将该 url 作为 request body 里的 avatar 字段调用 `PATCH /users/{userId}`。'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
              required:
                - image
        description: 二进制图片内容
  /lists:
    get:
      summary: 目录列表
      tags:
        - 目录
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                  lists:
                    type: array
                    items:
                      $ref: '#/components/schemas/List'
      operationId: get-lists
      description: 获取目录列表
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - schema:
            type: string
            enum:
              - '-stat.users'
              - '-createdAt'
          in: query
          name: sortBy
          description: 排序
        - schema:
            type: string
          in: query
          name: subject.id
          description: 过滤包含某条目的目录
        - schema:
            type: string
          in: query
          name: user.id
          description: 过滤某用户收藏的目录
    post:
      summary: 新建目录
      operationId: post-lists
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
      description: 新建目录
      tags:
        - 目录
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/List'
  '/lists/{listId}':
    parameters:
      - schema:
          type: string
        name: listId
        in: path
        required: true
    get:
      summary: 目录详情
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
      operationId: get-lists-listId
      description: 获取目录详情
      tags:
        - 目录
    patch:
      summary: 修改目录
      operationId: patch-lists-listId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
      tags:
        - 目录
      description: 修改目录
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/List'
    delete:
      summary: 删除目录
      operationId: delete-lists-listId
      responses:
        '204':
          description: No Content
      description: 删除目录
      tags:
        - 目录
  '/lists/{listId}/comments':
    parameters:
      - schema:
          type: string
        name: listId
        in: path
        required: true
    get:
      summary: 目录评论列表
      tags:
        - 目录
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  comments:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'
      operationId: get-lists-listId-comments
      description: 获取目录评论列表
    post:
      summary: 新建目录评论
      operationId: post-lists-listId-comments
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
      description: 新建目录评论
      tags:
        - 目录
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
        description: ''
  '/lists/{listId}/comments/{commentId}':
    parameters:
      - schema:
          type: string
        name: listId
        in: path
        required: true
      - schema:
          type: string
        name: commentId
        in: path
        required: true
    patch:
      summary: 修改目录评论
      tags:
        - 目录
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
      operationId: patch-lists-listId-comments-commentId
      description: 修改目录评论
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
    delete:
      summary: 删除目录评论
      operationId: delete-lists-listId-comments-commentId
      responses:
        '204':
          description: No Content
      tags:
        - 目录
      description: 删除目录评论
  '/lists/{listId}/items':
    parameters:
      - schema:
          type: string
        name: listId
        in: path
        required: true
    post:
      summary: 新建目录项
      tags:
        - 目录
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListItem'
      operationId: post-lists-listId-items
      description: 新建目录项
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListItem'
  '/lists/{listId}/items/{itemId}':
    parameters:
      - schema:
          type: string
        name: listId
        in: path
        required: true
      - schema:
          type: string
        name: itemId
        in: path
        required: true
    patch:
      summary: 修改目录项
      operationId: patch-lists-listId-items-itemId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListItem'
      description: 修改目录项
      tags:
        - 目录
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListItem'
    delete:
      summary: 删除目录项
      tags:
        - 目录
      responses:
        '204':
          description: No Content
      operationId: delete-lists-listId-items-itemId
      description: 删除目录项
  '/lists/{listId}/characters':
    parameters:
      - schema:
          type: string
        name: listId
        in: path
        required: true
    get:
      summary: 目录角色列表
      tags:
        - 目录
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  characters:
                    type: array
                    items:
                      $ref: '#/components/schemas/Character'
      operationId: get-lists-listId-characters
      description: 获取目录角色列表
  '/lists/{listId}/episodes':
    parameters:
      - schema:
          type: string
        name: listId
        in: path
        required: true
    get:
      summary: 目录章节列表
      tags:
        - 目录
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  episodes:
                    type: array
                    items:
                      $ref: '#/components/schemas/Episode'
      operationId: get-lists-listId-episodes
      description: 获取目录章节列表
  '/lists/{listId}/persons':
    parameters:
      - schema:
          type: string
        name: listId
        in: path
        required: true
    get:
      summary: 目录人物列表
      tags:
        - 目录
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  persons:
                    type: array
                    items:
                      $ref: '#/components/schemas/Person'
      operationId: get-lists-listId-persons
      description: 获取目录人物列表
  '/lists/{listId}/subjects':
    parameters:
      - schema:
          type: string
        name: listId
        in: path
        required: true
    get:
      summary: 目录条目列表
      tags:
        - 目录
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  subjects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Subject'
      operationId: get-lists-listId-subjects
      description: 获取目录条目列表
      parameters:
        - schema:
            type: string
            enum:
              - anime
              - book
              - music
              - game
              - real
          in: query
          name: type
          description: 根据条目类型过滤
        - schema:
            type: string
          in: query
          description: '过滤某用户已完成的条目（TODO: 待定）'
          name: user.id
  '/lists/{listId}/users':
    parameters:
      - schema:
          type: string
        name: listId
        in: path
        required: true
    get:
      summary: 目录收藏用户列表
      tags:
        - 目录
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
      operationId: get-lists-listId-users
      description: 获取目录收藏用户列表
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
  '/lists/{listId}/users/{userId}':
    parameters:
      - schema:
          type: string
        name: listId
        in: path
        required: true
      - $ref: '#/components/parameters/userId'
    get:
      summary: 确认收藏目录
      operationId: get-lists-listId-users-userId
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      description: 用于判断是否已收藏该目录，未收藏返回 404
      tags:
        - 目录
    put:
      summary: 收藏目录
      operationId: put-lists-listId-users-userId
      responses:
        '201':
          description: Created
      description: 收藏目录
      tags:
        - 目录
    delete:
      summary: 取消收藏目录
      operationId: delete-lists-listId-users-userId
      responses:
        '204':
          description: No Content
      description: 取消收藏目录
      tags:
        - 目录
  /messages:
    get:
      summary: 短信列表
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                  messages:
                    $ref: '#/components/schemas/Message'
      operationId: get-messages
      description: 获取短信列表
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - schema:
            type: string
            enum:
              - +createdAt
              - '-createdAt'
          in: query
          name: sortBy
          description: 排序
      tags:
        - 短信
    post:
      summary: 发送短信
      operationId: post-messages
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
      description: 发送短信
      tags:
        - 短信
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
  '/messages/{messageIds}':
    parameters:
      - schema:
          type: array
          items:
            type: string
        name: messageIds
        in: path
        required: true
        description: 消息 ID 们
    delete:
      summary: 删除短信
      operationId: delete-messages-messageIds
      responses:
        '204':
          description: No Content
      description: 删除短信
      tags:
        - 短信
  /persons:
    get:
      summary: 人物列表
      tags:
        - 人物
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                  persons:
                    type: array
                    items:
                      $ref: '#/components/schemas/Person'
      operationId: get-persons
      description: 获取人物列表
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - schema:
            type: string
            enum:
              - person
              - company
              - group
          in: query
          name: type
          description: 根据类型过滤
        - schema:
            type: string
            enum:
              - cartoonist
              - writer
              - illustrator
              - seiyuu
              - actor
              - musician
              - producer
          in: query
          name: career
          description: 根据职业过滤
        - schema:
            type: string
            enum:
              - A
              - B
              - O
              - AB
          in: query
          name: bloodType
          description: 根据血型过滤
        - schema:
            type: string
            enum:
              - male
              - female
          in: query
          name: gender
          description: 根据性别过滤
        - schema:
            type: string
            enum: []
            example: '--01'
          in: query
          name: birthday
          description: 根据生日过滤
        - schema:
            type: string
            enum:
              - '-stat.users'
              - '-stat.comments'
              - '-createdAt'
              - +name
          in: query
          name: sortBy
          description: 排序
    post:
      summary: 新建人物
      operationId: post-persons
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
      description: 新建人物
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Person'
      tags:
        - 人物
  '/persons/{personId}':
    parameters:
      - schema:
          type: string
        name: personId
        in: path
        required: true
    get:
      summary: 人物详情
      tags:
        - 人物
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
      operationId: get-persons-personId
      description: 获取人物详情
    patch:
      summary: 修改人物
      operationId: patch-persons-personId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Person'
      description: 修改人物
      tags:
        - 人物
  '/persons/{personId}/comments':
    parameters:
      - schema:
          type: string
        name: personId
        in: path
        required: true
    get:
      summary: 人物评论列表
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  comments:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'
      operationId: get-persons-personId-comments
      description: 获取人物评论列表
      tags:
        - 人物
    post:
      summary: 创建人物评论
      operationId: post-persons-personId-comments
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
      description: 创建人物评论
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      tags:
        - 人物
  '/persons/{personId}/comments/{commentId}':
    parameters:
      - schema:
          type: string
        name: personId
        in: path
        required: true
      - schema:
          type: string
        name: commentId
        in: path
        required: true
    patch:
      summary: 修改人物评论
      operationId: patch-persons-personId-comments-commentId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
      description: 修改人物评论
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      tags:
        - 人物
    delete:
      summary: 删除人物评论
      operationId: delete-persons-personId-comments-commentId
      responses:
        '204':
          description: No Content
      description: 删除人物评论
      tags:
        - 人物
  /persons/-/collections:
    get:
      summary: 所有人物收藏列表
      tags:
        - 人物
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                  collections:
                    type: array
                    items:
                      $ref: '#/components/schemas/PersonCollection'
      operationId: get-persons---collections
      description: 获取所有人物收藏列表，不返回 creator 字段，要返回 person 字段
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - schema:
            type: string
          in: query
          name: creator.id
          description: 根据创建者用户 ID 或用户名过滤
          required: true
  '/persons/{personId}/collections':
    parameters:
      - schema:
          type: string
        name: personId
        in: path
        required: true
    get:
      summary: 人物收藏列表
      tags:
        - 人物
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                  collections:
                    type: array
                    items:
                      $ref: '#/components/schemas/PersonCollection'
      operationId: get-persons-personId-collections
      description: 获取人物收藏列表，要返回 creator 字段，不返回 person 字段
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
  '/persons/{personId}/collections/{userId}':
    parameters:
      - schema:
          type: string
        name: personId
        in: path
        required: true
      - $ref: '#/components/parameters/userId'
    get:
      summary: 确认收藏人物
      operationId: get-persons-personId-collections-userId
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      description: 用于判断是否已收藏该人物，未收藏返回 404
      tags:
        - 人物
    put:
      summary: 收藏人物
      operationId: put-persons-personId-collections-userId
      responses:
        '201':
          description: Created
      description: 收藏人物
      tags:
        - 人物
    delete:
      summary: 取消收藏人物
      operationId: delete-persons-personId-collections-userId
      responses:
        '204':
          description: No Content
      description: 取消收藏人物
      tags:
        - 人物
  /settings:
    get:
      summary: 设置
      tags:
        - 杂项
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settings'
      operationId: get-settings
      description: 获取设置
    patch:
      summary: 修改设置
      operationId: patch-settings
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settings'
      description: 修改设置
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Settings'
      tags:
        - 杂项
  /subjects:
    get:
      summary: 条目列表
      tags:
        - 条目
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                  subjects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Subject'
      operationId: get-subjects
      description: 获取条目列表
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - schema:
            type: string
          in: query
          name: q
          description: 搜索关键字
        - schema:
            type: string
          in: query
          name: type
          description: 根据类型过滤
        - schema:
            type: string
          in: query
          name: subtype
          description: 根据子类型过滤
        - schema:
            type: array
            items:
              type: string
              format: date
            minItems: 0
            maxItems: 2
            example:
              - '2020-01-01'
              - '2020-03-31'
          in: query
          explode: false
          name: beginDate
          description: 根据开始时间范围过滤
        - schema:
            type: array
            items:
              type: string
              format: date
            minItems: 0
            maxItems: 2
            example:
              - '2020-01-01'
              - '2020-03-31'
          in: query
          explode: false
          name: endDate
          description: 根据结束时间范围过滤
        - schema:
            type: string
            enum:
              - +stat.rank
              - '-beginDate'
              - +name
          in: query
          name: sortBy
          description: 排序
        - schema:
            type: string
            example: '12'
          in: query
          name: recommendBy
          description: 返回某条目的推荐条目
    post:
      summary: 新建条目
      operationId: post-subjects
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subject'
      description: 新建条目
      tags:
        - 条目
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subject'
  '/subjects/{subjectId}':
    parameters:
      - schema:
          type: string
        name: subjectId
        in: path
        required: true
    get:
      summary: 条目详情
      tags:
        - 条目
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subject'
      operationId: get-subjects-subjectId
      description: 获取条目详情
    patch:
      summary: 修改条目
      operationId: patch-subjects-subjectId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subject'
      tags:
        - 条目
      description: 修改条目
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subject'
  /subjects/-/collections:
    get:
      summary: 所有条目收藏列表
      tags:
        - 条目
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                  collections:
                    type: array
                    items:
                      $ref: '#/components/schemas/SubjectCollection'
      operationId: get-subjects---collections
      description: 获取所有条目收藏列表，不返回 creator 字段，要返回 subject 字段
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - schema:
            type: string
          in: query
          name: creator.id
          description: 根据创建者用户 ID 或用户名过滤
        - schema:
            type: string
            enum:
              - planned
              - completed
              - doing
              - onHold
              - dropped
          in: query
          name: state
          description: 根据状态过滤
        - schema:
            type: string
            enum:
              - 'true'
          in: query
          name: review
          description: 过滤带吐槽的收藏
        - schema:
            type: string
          in: query
          name: tags
          description: 根据标签过滤
        - schema:
            type: string
            enum:
              - '-score'
              - '-createdAt'
              - '-subject.beginDate'
              - +subject.name
          in: query
          name: sortBy
          description: 排序
  '/subjects/{subjectId}/collections':
    parameters:
      - schema:
          type: string
        name: subjectId
        in: path
        required: true
    get:
      summary: 条目收藏列表
      tags:
        - 条目
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                  collections:
                    type: array
                    items:
                      $ref: '#/components/schemas/SubjectCollection'
      operationId: get-subjects-subjectId-collections
      description: 获取条目收藏列表，要返回 creator 字段，不返回 subject 字段
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - schema:
            type: string
            enum:
              - planned
              - completed
              - doing
              - onHold
              - dropped
          in: query
          name: state
          description: 根据状态过滤
        - schema:
            type: string
            enum:
              - 'true'
          in: query
          name: review
          description: 过滤带吐槽的收藏
        - schema:
            type: string
          in: query
          name: tags
          description: 根据标签过滤
        - schema:
            type: string
            enum:
              - '-score'
              - '-createdAt'
              - '-subject.beginDate'
              - +subject.name
          in: query
          name: sortBy
          description: 排序
  '/subjects/{subjectId}/collections/{userId}':
    parameters:
      - schema:
          type: string
        name: subjectId
        in: path
        required: true
      - $ref: '#/components/parameters/userId'
    get:
      summary: 条目收藏详情
      tags:
        - 条目
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubjectCollection'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-subjects-subjectId-collections-userId
      description: 用于判断是否收藏，未收藏返回 404
    patch:
      summary: 修改条目收藏
      operationId: patch-subjects-subjectId-collections-userId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubjectCollection'
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubjectCollection'
      description: 修改收藏内容。未收藏时新建该收藏
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubjectCollection'
      tags:
        - 条目
    delete:
      summary: 删除条目收藏
      operationId: delete-subjects-subjectId-collections-userId
      responses:
        '204':
          description: No Content
      description: 取消收藏
      tags:
        - 条目
  '/subjects/{subjectId}/episodes':
    parameters:
      - schema:
          type: string
        name: subjectId
        in: path
        required: true
    get:
      summary: 条目章节列表
      tags:
        - 条目
        - 章节
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  episodes:
                    $ref: '#/components/schemas/Episode'
      operationId: get-subjects-subjectId-episodes
      description: 获取条目章节列表，不返回 subject 字段
    post:
      summary: 新建章节
      operationId: post-episodes
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Episode'
      description: 新建章节
      tags:
        - 条目
        - 章节
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Episode'
  '/subjects/{subjectId}/episodes/-/collections':
    parameters:
      - schema:
          type: string
        name: subjectId
        in: path
        required: true
    get:
      summary: 条目所有章节收藏列表
      tags:
        - 条目
        - 章节
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  collections:
                    type: array
                    items:
                      $ref: '#/components/schemas/EpisodeCollection'
      operationId: get-subjects-subjectId-episodes---collections
      description: 某条目的章节的收藏信息
      parameters:
        - schema:
            type: string
          in: query
          name: creator.id
          description: 根据创建者用户 ID 或用户名过滤
          required: true
  /subjects/-/topics:
    get:
      summary: 所有条目话题列表
      tags:
        - 条目
        - 话题
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                  topics:
                    type: array
                    items:
                      $ref: '#/components/schemas/Topic'
      operationId: get-subjects---topics
      description: 获取所有条目话题列表
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - schema:
            type: string
          in: query
          name: creator.id
          description: 根据创建者用户 ID 或用户名过滤
        - schema:
            type: string
          in: query
          name: comment.creator.id
          description: 根据回复者用户 ID 或用户名过滤
  '/subjects/{subjectId}/topics':
    parameters:
      - schema:
          type: string
        name: subjectId
        in: path
        required: true
    get:
      summary: 条目话题列表
      tags:
        - 条目
        - 话题
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                  topics:
                    type: array
                    items:
                      $ref: '#/components/schemas/Topic'
      operationId: get-subjects-subjectId-topics
      description: 获取条目话题列表
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - schema:
            type: string
          in: query
          name: creator.id
          description: 根据创建者用户 ID 或用户名过滤
        - schema:
            type: string
          in: query
          name: comment.creator.id
          description: 根据回复者用户 ID 或用户名过滤
    post:
      summary: 新建条目话题
      operationId: post-subjects-subjectId-topics
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'
      description: 新建条目话题
      tags:
        - 条目
        - 话题
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Topic'
        description: ''
  /tags:
    get:
      summary: 标签列表
      tags:
        - 标签
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                  tags:
                    type: array
                    items:
                      $ref: '#/components/schemas/Tag'
      operationId: get-tags
      description: 获取标签列表
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - schema:
            type: string
          in: query
          name: creator.id
          description: 根据（收藏的）创建者用户 ID 或用户名过滤
        - schema:
            type: string
          in: query
          name: subject.id
          description: 根据（收藏的）条目 ID 过滤
        - schema:
            type: string
            enum:
              - planned
              - completed
              - doing
              - onHold
              - dropped
          in: query
          name: state
          description: 根据（收藏的）状态过滤
  '/topics/{topicId}':
    parameters:
      - schema:
          type: string
        name: topicId
        in: path
        required: true
    get:
      summary: 话题详情
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'
      operationId: get-topics-topicId
      description: 获取话题详情
      tags:
        - 话题
    patch:
      summary: 修改话题
      operationId: patch-groups-groupId-topics-topicId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'
      description: 修改话题
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Topic'
      tags:
        - 话题
    delete:
      summary: 删除话题
      operationId: delete-groups-groupId-topics-topicId
      responses:
        '204':
          description: No Content
      description: 删除话题
      tags:
        - 话题
  '/topics/{topicId}/comments':
    parameters:
      - schema:
          type: string
        name: topicId
        in: path
        required: true
    get:
      summary: 话题评论列表
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  comments:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'
      operationId: get-topics-topicId-comments
      description: 获取话题评论列表
      tags:
        - 话题
    post:
      summary: 创建话题评论
      operationId: post-groups-groupId-topics-topicId-comments
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
      description: 创建话题评论
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      tags:
        - 话题
  '/topics/{topicId}/comments/{commentId}':
    parameters:
      - schema:
          type: string
        name: topicId
        in: path
        required: true
      - schema:
          type: string
        name: commentId
        in: path
        required: true
    patch:
      summary: 修改话题评论
      operationId: patch-topics-topicId-comments-commentId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
      description: 修改话题评论
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      tags:
        - 话题
    delete:
      summary: 删除话题评论
      operationId: delete-groups-groupId-topics-topicId-comments-commentId
      responses:
        '204':
          description: No Content
      description: 删除话题评论
      tags:
        - 话题
  /users:
    post:
      summary: 创建用户
      operationId: post-users
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      description: 创建用户
      tags:
        - 用户
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: 邮箱
                name:
                  type: string
                  description: 昵称
                password:
                  type: string
                  format: password
                  description: 密码
              required:
                - email
                - password
        description: 验证码与实际采用方案有关，不是用户模型的属性，不作为 body 的字段，可以加 Header 里
  '/users/{userId}':
    parameters:
      - $ref: '#/components/parameters/userId'
    get:
      summary: 用户详情
      tags:
        - 用户
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-users-userId
      description: 获取用户详情
    patch:
      summary: 修改用户详情
      operationId: patch-users-userId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      description: 修改用户详情
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/User'
                - type: object
                  properties:
                    oldPassword:
                      type: string
                      description: 旧密码
                      format: password
                    password:
                      type: string
                      description: 新密码
                      format: password
        description: "可传部分字段。管理员对用户的操作也是这个接口，例如传 `permission.wikiEdit: true` 时就是增加维基编辑权限，传 `state: 'blocked'` 时就是封禁用户。"
      tags:
        - 用户
  '/users/{userId}/blocks':
    parameters:
      - $ref: '#/components/parameters/userId'
    get:
      summary: 绝交列表
      tags:
        - 用户
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                  blocks:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
      operationId: get-users-userId-blocks
      description: 获取绝交列表
  '/users/{userId}/blocks/{blockId}':
    parameters:
      - $ref: '#/components/parameters/userId'
      - schema:
          type: string
        name: blockId
        in: path
        required: true
        description: 绝交对象的用户 ID
    get:
      summary: 确认绝交
      tags:
        - 用户
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-users-userId-blocks-blockId
      description: 用于判断是否绝交某用户，未绝交返回 404
    put:
      summary: 创建绝交
      operationId: put-users-userId-blocks-blockId
      responses:
        '201':
          description: Created
      description: 创建绝交
      tags:
        - 用户
    delete:
      summary: 取消绝交
      operationId: delete-users-userId-blocks-blockId
      responses:
        '204':
          description: No Content
      description: 取消绝交
      tags:
        - 用户
  '/users/{userId}/followers':
    parameters:
      - $ref: '#/components/parameters/userId'
    get:
      summary: 关注者列表
      tags:
        - 用户
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                  followers:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
      operationId: get-users-userId-followers
      description: 获取关注者列表
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
  '/users/{userId}/followings':
    parameters:
      - $ref: '#/components/parameters/userId'
    get:
      summary: 正在关注列表
      tags:
        - 用户
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                  followings:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
      operationId: get-users-userId-followings
      description: 获取正在关注列表
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
  '/users/{userId}/followings/{follwingId}':
    parameters:
      - $ref: '#/components/parameters/userId'
      - schema:
          type: string
        name: follwingId
        in: path
        required: true
        description: 关注的用户的 id 或用户名
    get:
      summary: 确认关注
      operationId: get-users-userId-followings-follwingId
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      description: 用于判断是否关注某用户，未关注返回 404
      tags:
        - 用户
    put:
      summary: 添加关注
      operationId: put-users-userId-followings-follwingId
      responses:
        '201':
          description: Created
      tags:
        - 用户
      description: 添加关注
    delete:
      summary: 取消关注
      operationId: delete-users-userId-followings-follwingId
      responses:
        '204':
          description: No Content
      description: 取消关注
      tags:
        - 用户
components:
  schemas:
    Blog:
      title: Blog
      type: object
      description: 日志
      properties:
        id:
          type: integer
          readOnly: true
          description: ID
        title:
          type: string
          description: 标题
        content:
          type: string
          description: 正文
        images:
          type: array
          description: 图片
          items:
            type: string
            format: uri
        tags:
          type: array
          description: 标签
          items:
            type: string
        privacy:
          type: string
          description: 隐私：公开、仅好友可见
          enum:
            - public
            - followings
        createdAt:
          type: string
          format: date-time
          readOnly: true
          description: 创建时间
        updatedAt:
          type: string
          format: date-time
          readOnly: true
          description: 更新时间
        creator:
          allOf:
            - $ref: '#/components/schemas/User'
          readOnly: true
        subjects:
          type: array
          readOnly: true
          description: 关联条目
          items:
            $ref: '#/components/schemas/Subject'
        stat:
          description: 统计信息
          type: object
          readOnly: true
          required:
            - comments
            - lastCommentedAt
          properties:
            comments:
              type: integer
              description: 回复数
            lastCommentedAt:
              type: string
              format: date-time
              description: 最后回复时间
      required:
        - id
        - title
        - content
        - images
        - tags
        - privacy
        - createdAt
        - updatedAt
        - creator
        - subjects
        - stat
    Character:
      title: Character
      description: 角色
      allOf:
        - $ref: '#/components/schemas/Mono'
    CharacterCollection:
      title: CharacterCollection
      description: 角色收藏
      allOf:
        - $ref: '#/components/schemas/Collection'
        - type: object
          properties:
            character:
              allOf:
                - $ref: '#/components/schemas/Character'
              readOnly: true
    Collection:
      title: Collection
      type: object
      description: 收藏
      properties:
        id:
          type: integer
          readOnly: true
          description: 用户 ID，同 creator.id
        createdAt:
          type: string
          format: date-time
          readOnly: true
          description: 创建时间
        updatedAt:
          type: string
          format: date-time
          readOnly: true
          description: 更新时间
        creator:
          allOf:
            - $ref: '#/components/schemas/User'
          readOnly: true
          description: （收藏的）创建者
      required:
        - id
        - createdAt
        - updatedAt
    Comment:
      title: Comment
      type: object
      description: 评论
      properties:
        id:
          type: integer
          readOnly: true
          description: ID
        content:
          type: string
          description: 正文
        replyTo:
          description: 被回复的评论的 ID
          type: integer
        createdAt:
          type: string
          format: date-time
          readOnly: true
          description: 创建时间
        updatedAt:
          type: string
          format: date-time
          readOnly: true
          description: 更新时间
        creator:
          allOf:
            - $ref: '#/components/schemas/User'
          readOnly: true
      required:
        - id
        - content
        - replyTo
        - createdAt
        - updatedAt
        - creator
    Episode:
      title: Episode
      type: object
      description: 章节
      properties:
        id:
          type: integer
          readOnly: true
          description: ID
        title:
          type: string
          description: 标题
        translation:
          $ref: '#/components/schemas/Translation'
        type:
          type: string
          description: 类型
          enum:
            - main
            - sp
            - op
            - ed
            - pv
            - mad
            - other
            - ''
        episode:
          type: number
          description: 话数、曲目编号
        disc:
          description: 光盘编号
          type: integer
        beginDate:
          type: string
          description: 放送时间
          format: date
        duration:
          type: integer
          description: 时长，单位秒
        synopsis:
          type: string
          description: 概要
        createdAt:
          type: string
          format: date-time
          readOnly: true
          description: 创建时间
        updatedAt:
          type: string
          format: date-time
          readOnly: true
          description: 更新时间
        stat:
          required:
            - comments
          description: 统计信息
          type: object
          properties:
            comments:
              type: integer
              description: 评论数
        subject:
          allOf:
            - $ref: '#/components/schemas/Subject'
          readOnly: true
          description: 所属条目
      required:
        - id
        - title
        - translation
        - type
        - episode
        - disc
        - beginDate
        - duration
        - synopsis
        - createdAt
        - updatedAt
        - stat
    EpisodeCollection:
      title: EpisodeCollection
      description: 章节收藏
      allOf:
        - $ref: '#/components/schemas/Collection'
        - type: object
          properties:
            state:
              type: string
              enum:
                - planned
                - completed
                - doing
                - onHold
                - dropped
              description: 状态
    Error:
      title: Error
      description: 错误
      type: object
      properties:
        error:
          type: object
          required:
            - code
            - message
          description: ''
          properties:
            code:
              type: string
              description: 错误码
            message:
              type: string
              description: 错误信息
      required:
        - error
    Group:
      title: Group
      type: object
      description: 小组
      properties:
        id:
          type: string
          description: ID
          example: boring
        name:
          type: string
          example: 靠谱人生茶话会
          description: 名称
        intro:
          type: string
          description: 介绍
        avatar:
          type: string
          description: 头像
          format: uri
        privacy:
          type: string
          description: 隐私：公开、半公开
          enum:
            - public
            - members
        category:
          type: object
          description: 分类
          required:
            - id
            - name
          properties:
            id:
              type: string
              description: 分类 ID
              example: Bangumi
            name:
              type: string
              readOnly: true
              description: 分类名称
              example: 番组
        createdAt:
          type: string
          format: date-time
          readOnly: true
          description: 创建时间
        updatedAt:
          type: string
          format: date-time
          readOnly: true
          description: 更新时间
        creator:
          allOf:
            - $ref: '#/components/schemas/User'
          readOnly: true
        stat:
          description: 统计信息
          type: object
          readOnly: true
          required:
            - users
            - topics
          properties:
            users:
              type: integer
              description: 成员数
            topics:
              type: integer
              description: 话题数
      required:
        - id
        - name
        - intro
        - avatar
        - privacy
        - category
        - createdAt
        - updatedAt
        - creator
        - stat
    List:
      title: List
      type: object
      description: 目录
      properties:
        id:
          type: string
          readOnly: true
          description: ID
        name:
          type: string
          description: 名称
        intro:
          type: string
          description: 介绍
        createdAt:
          type: string
          format: date-time
          readOnly: true
          description: 创建时间
        updatedAt:
          type: string
          format: date-time
          readOnly: true
          description: 更新时间
        creator:
          allOf:
            - $ref: '#/components/schemas/User'
          readOnly: true
          description: 创建者
        items:
          type: array
          readOnly: true
          description: 目录项列表
          items:
            $ref: '#/components/schemas/ListItem'
        stat:
          type: object
          readOnly: true
          description: 统计信息
          required:
            - users
            - animeSubjects
            - bookSubjects
            - musicSubjects
            - gameSubjects
            - realSubjects
            - subjects
            - characters
            - persons
            - episodes
            - items
            - comments
          properties:
            users:
              type: integer
              description: 收藏用户数
            comments:
              type: integer
              description: 评论数
            items:
              type: integer
              description: 项数
            characters:
              type: integer
              description: 角色数
            persons:
              type: integer
              description: 人物数
            episodes:
              type: integer
              description: 章节数
            subjects:
              type: integer
              description: 条目数
            animeSubjects:
              type: integer
              description: 动画条目数
            bookSubjects:
              type: integer
              description: 书籍条目数
            musicSubjects:
              type: integer
              description: 音乐条目数
            gameSubjects:
              type: integer
              description: 游戏条目数
            realSubjects:
              type: integer
              description: 三次元条目数
      required:
        - id
        - name
        - intro
        - createdAt
        - updatedAt
        - creator
        - stat
    ListItem:
      title: ListItem
      type: object
      description: 目录项
      properties:
        id:
          type: string
          readOnly: true
          description: 'ID，由 `{resource}-{resourceId}` 拼接'
        sort:
          type: integer
          description: 排序
          default: 0
        note:
          type: string
          description: 评价
        resource:
          type: string
          description: 资源
          enum:
            - subject
            - character
            - person
            - episode
        resourceId:
          description: 资源 ID
          type: integer
      required:
        - id
        - sort
        - note
        - resource
        - resourceId
    Message:
      title: Message
      type: object
      description: 短信
      properties:
        id:
          description: ID
          type: integer
          readOnly: true
        title:
          type: string
          description: 标题
        content:
          type: string
          description: 内容
        sender:
          description: 发送者用户 ID
          type: integer
        receiver:
          description: 接受者用户 ID
          type: integer
        createdAt:
          type: string
          format: date-time
          readOnly: true
          description: 创建时间
      required:
        - id
        - title
        - content
        - sender
        - receiver
        - createdAt
    Mono:
      title: Mono
      type: object
      description: 现实人物或虚拟角色（为什么叫 Mono）
      properties:
        id:
          type: integer
          readOnly: true
          description: ID
        type:
          type: string
          description: 类型：个人、公司、组合、角色、机体、舰船、组织机构
          enum:
            - person
            - company
            - group
            - character
            - robot
            - fleet
            - organization
        name:
          type: string
          description: 名称
        translation:
          allOf:
            - $ref: '#/components/schemas/Translation'
          readOnly: true
        intro:
          type: string
          description: 介绍
        gender:
          type: string
          readOnly: true
          description: 性别
          enum:
            - male
            - female
        birthday:
          type: string
          format: date
          readOnly: true
          description: '生日（根据 ISO 8601 规范，后面省略可以不写，前面省略用 `-` 占位，一些例子：`2000-01-02`, `2000-01`, `2000`, `--01-02`, `2000---02`, `--01`, `----02`）'
        bloodType:
          type: string
          readOnly: true
          description: 血型
          enum:
            - A
            - B
            - AB
            - O
        createdAt:
          type: string
          format: date-time
          readOnly: true
          description: 创建时间
        updatedAt:
          type: string
          format: date-time
          readOnly: true
          description: 更新时间
        wikis:
          type: array
          description: 维基项
          items:
            $ref: '#/components/schemas/Wiki'
        stat:
          description: 统计信息
          type: object
          readOnly: true
          required:
            - users
            - comments
          properties:
            users:
              description: 收藏用户数
              type: integer
            comments:
              description: 评论数
              type: integer
      required:
        - id
        - name
        - intro
        - gender
        - birthday
        - bloodType
        - createdAt
        - updatedAt
        - wikis
        - stat
    Pagination:
      title: Pagination
      type: object
      description: 分页
      properties:
        total:
          type: integer
          description: 总条数
        page:
          description: 当前页数
          type: integer
        perPage:
          description: 每页条数
          type: integer
        lastPage:
          description: 总页数
          type: integer
      required:
        - total
        - page
        - perPage
        - lastPage
    Person:
      title: Person
      readOnly: true
      description: 人物
      allOf:
        - $ref: '#/components/schemas/Mono'
        - type: object
          properties:
            careers:
              description: 职业：漫画家、绘师、作家、声优、歌手（音乐家、乐队组合）、演员、制作人员（制作公司）
              type: array
              items:
                type: string
                enum:
                  - cartoonist
                  - illustrator
                  - writer
                  - seiyuu
                  - musician
                  - actor
                  - producer
          required:
            - careers
    PersonCollection:
      title: PersonCollection
      description: 人物收藏
      allOf:
        - $ref: '#/components/schemas/Collection'
        - type: object
          properties:
            person:
              allOf:
                - $ref: '#/components/schemas/Person'
              readOnly: true
    Revision:
      title: Revision
      type: object
      description: 修订
      properties:
        id:
          type: integer
          readOnly: true
          description: ID
        summary:
          type: string
          description: 编辑摘要
        createdAt:
          type: string
          format: date-time
          readOnly: true
          description: 创建时间
        creator:
          allOf:
            - $ref: '#/components/schemas/User'
          readOnly: true
          description: 创建人
      required:
        - id
        - summary
        - createdAt
        - creator
    Settings:
      title: Settings
      type: object
      description: 设置
      properties:
        message:
          type: string
          enum:
            - all
            - friends
            - none
          description: 接收短信
        timeline:
          type: string
          enum:
            - all
            - friends
            - none
          description: 时间线回复
        at:
          type: string
          enum:
            - all
            - friends
            - none
          description: '@ 提醒'
        comment:
          type: string
          description: 评论提醒
          enum:
            - all
            - friends
            - none
        ukagaka:
          description: 伪春菜
          type: integer
      required:
        - message
        - timeline
        - at
        - comment
        - ukagaka
    Subject:
      title: Subject
      type: object
      description: 条目
      properties:
        id:
          type: integer
          readOnly: true
          description: ID
        type:
          type: string
          description: 类型
          enum:
            - anime
            - book
            - music
            - game
            - real
        subtype:
          type: string
          description: 子类型
          enum:
            - tv
            - web
            - ova
            - movie
            - comic
            - comic-series
            - illustration
            - novel
            - jp
            - en
            - zh
            - other
        title:
          description: 标题（原始的语言）
          type: string
        translation:
          allOf:
            - $ref: '#/components/schemas/Translation'
          readOnly: true
        synopsis:
          type: string
          description: 概要
        image:
          type: string
          description: 图片（海报、封面）
        beginDate:
          type: string
          format: date
          readOnly: true
          description: 开始时间（放送、发售）
        endDate:
          type: string
          format: date
          readOnly: true
          description: 结束时间
        locked:
          description: 是否锁定
          type: boolean
        restricted:
          type: boolean
          description: 是否受限内容
        createdAt:
          type: string
          format: date-time
          readOnly: true
          description: 创建时间
        updatedAt:
          type: string
          format: date-time
          readOnly: true
          description: 更新时间
        stat:
          type: object
          readOnly: true
          description: 统计信息
          properties:
            planned:
              type: integer
              description: 想做数
            completed:
              type: integer
              description: 完成数
            doing:
              type: integer
              description: 在做数
            onHold:
              type: integer
              description: 搁置数
            dropped:
              type: integer
              description: 抛弃数
            rank:
              type: integer
              description: 排名
            score:
              type: number
              description: 评分
            ratings:
              type: array
              description: 评分人数，数组长度 11，分别表示未打分、打 1 分、打 2 分……打 10 分人数
              minItems: 0
              maxItems: 11
              items:
                type: integer
                minimum: 0
                maximum: 10
            episodes:
              type: integer
              description: '集数（anime, real 会有）'
            vols:
              type: integer
              description: 卷数（book 会有）
            chapters:
              type: integer
              description: 章数（book 会有）
          required:
            - planned
            - completed
            - doing
            - onHold
            - dropped
            - rank
            - score
            - ratings
        wikis:
          type: array
          description: 维基项
          items:
            $ref: '#/components/schemas/Wiki'
      required:
        - id
        - type
        - subtype
        - title
        - translation
        - synopsis
        - image
        - beginDate
        - endDate
        - locked
        - restricted
        - createdAt
        - updatedAt
        - wikis
    SubjectCollection:
      title: SubjectCollection
      description: 收藏
      allOf:
        - $ref: '#/components/schemas/Collection'
        - type: object
          properties:
            state:
              type: string
              enum:
                - planned
                - completed
                - doing
                - onHold
                - dropped
              description: 状态
            score:
              type: integer
              minimum: 0
              maximum: 10
              description: 评分（0 表示未评分）
            review:
              type: string
              description: 吐槽
            tags:
              type: array
              description: 标签
              items:
                type: string
            privacy:
              type: string
              description: 隐私：公开、仅自己可见
              enum:
                - public
                - self
            vol:
              type: number
              description: 卷数
            chapter:
              description: 章数
              type: number
            subject:
              readOnly: true
              allOf:
                - $ref: '#/components/schemas/Subject'
          required:
            - state
            - score
            - review
            - tags
            - privacy
    Tag:
      title: Tag
      type: object
      properties:
        name:
          type: string
          description: 内容
        count:
          type: integer
          description: 计数
      required:
        - name
        - count
      description: 标签
    Topic:
      title: Topic
      type: object
      description: 话题
      properties:
        id:
          type: integer
          readOnly: true
          description: ID
        title:
          type: string
          description: 标题
        content:
          type: string
          description: 正文
        createdAt:
          type: string
          format: date-time
          readOnly: true
          description: 创建时间
        updatedAt:
          type: string
          format: date-time
          readOnly: true
          description: 更新时间
        creator:
          allOf:
            - $ref: '#/components/schemas/User'
          readOnly: true
        group:
          oneOf:
            - $ref: '#/components/schemas/Group'
            - type: 'null'
          readOnly: true
          nullable: true
        subject:
          oneOf:
            - $ref: '#/components/schemas/Subject'
            - type: 'null'
          readOnly: true
          nullable: true
        stat:
          type: object
          readOnly: true
          description: 统计信息
          required:
            - comments
            - lastCommentedAt
          properties:
            comments:
              description: 回复数
              type: integer
            lastCommentedAt:
              type: string
              format: date-time
              description: 最后回复时间
      required:
        - id
        - title
        - content
        - createdAt
        - updatedAt
        - creator
        - stat
    Translation:
      title: Translation
      type: object
      description: '翻译、别名。key 值符合 [bcp47](https://tools.ietf.org/html/bcp47) 规范。'
      properties:
        ja:
          description: 日文
          type: array
          items:
            type: string
        ja-Hrkt:
          description: 日文假名
          type: array
          items:
            type: string
        ja-Latn:
          description: 日文罗马音
          type: array
          items:
            type: string
        zh-Hans:
          type: array
          description: 简体中文
          items:
            type: string
        en:
          type: array
          description: 英文
          items:
            type: string
    User:
      title: User
      type: object
      description: 用户
      properties:
        id:
          type: integer
          readOnly: true
          description: 用户 ID
          example: 1
        username:
          type: string
          example: sai
          description: 用户名
          pattern: '^[a-z][a-z0-9_]+'
        name:
          type: string
          example: "Sai\uD83D\uDD96"
          description: 昵称
        avatar:
          type: string
          format: uri
          description: 头像
        bio:
          type: string
          description: 自我介绍
          example: 'Awesome!'
        url:
          type: string
          format: uri
          example: 'http://saicn.com/me'
          description: 个人网站
        state:
          type: string
          description: 状态：正常、禁言、封禁
          enum:
            - active
            - muted
            - blocked
        createdAt:
          type: string
          format: date-time
          description: 创建时间
          readOnly: true
        permission:
          type: object
          description: 权限（被其他模型引用时不返回）
          properties:
            bangumi:
              type: boolean
              description: Bangumi 管理权限
            doujin:
              type: boolean
              description: 天窗管理权限
            mono:
              type: boolean
              description: 人物管理权限
            wiki:
              type: boolean
              description: 维基管理权限
            wikiEdit:
              type: boolean
              description: 维基编辑权限
          required:
            - bangumi
            - doujin
            - mono
            - wiki
            - wikiEdit
        sns:
          type: object
          description: 网络服务（被其他模型引用时不返回）
          properties:
            psn:
              type: string
              description: PlayStation Network
            xboxLive:
              type: string
              description: Xbox Live
            ns:
              type: string
              description: Nintendo Switch
            friendCode:
              type: string
              description: Nintendo Friend Code
            steam:
              type: string
              description: Steam
            battleTag:
              type: string
              description: BattleTag
            pixiv:
              type: string
              description: Pixiv
            github:
              type: string
              description: GitHub
            twitter:
              type: string
              description: Twitter
            instagram:
              type: string
              description: Instagram
          required:
            - psn
            - xboxLive
            - ns
            - friendCode
            - steam
            - battleTag
            - pixiv
            - github
            - twitter
            - instagram
      required:
        - id
        - username
        - name
        - avatar
        - bio
        - url
        - state
        - createdAt
    Wiki:
      title: Wiki
      type: object
      description: 维基
      properties:
        key:
          type: string
          description: 字段名称
        value:
          description: 字段值
          oneOf:
            - type: string
            - type: array
              items:
                $ref: '#/components/schemas/Wiki'
      required:
        - key
        - value
  parameters:
    page:
      name: page
      in: query
      description: 当前页数
      schema:
        type: number
    perPage:
      name: perPage
      in: query
      description: 每页条数
      schema:
        type: number
    userId:
      name: userId
      in: path
      description: 用户 ID 或用户名
      required: true
      schema:
        type: string
        example: sai
tags:
  - name: 用户
  - name: 短信
  - name: 小组
  - name: 话题
  - name: 条目
  - name: 章节
  - name: 收藏
  - name: 标签
  - name: 目录
  - name: 人物
  - name: 角色
  - name: 日志
  - name: 杂项
